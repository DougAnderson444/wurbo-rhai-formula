// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod demo {
    #[allow(dead_code)]
    pub mod form {
        #[allow(dead_code, clippy::all)]
        pub mod context_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Details required in order to add an event listener to an element
            #[derive(Clone)]
            pub struct ListenDetails {
                pub selector: _rt::String,
                pub ty: _rt::String,
            }
            impl ::core::fmt::Debug for ListenDetails {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ListenDetails")
                        .field("selector", &self.selector)
                        .field("ty", &self.ty)
                        .finish()
                }
            }
            /// Optionally set the initial content of the component
            #[derive(Clone)]
            pub struct Content {
                pub revenue: Option<f64>,
                pub expenses: Option<f64>,
                pub formula: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Content {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Content")
                        .field("revenue", &self.revenue)
                        .field("expenses", &self.expenses)
                        .field("formula", &self.formula)
                        .finish()
                }
            }
            /// Context passed into the component
            #[derive(Clone)]
            pub enum Context {
                AllContent(Content),
                Revenue(f64),
                Expenses(f64),
                Formula(_rt::String),
            }
            impl ::core::fmt::Debug for Context {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Context::AllContent(e) => {
                            f.debug_tuple("Context::AllContent").field(e).finish()
                        }
                        Context::Revenue(e) => f.debug_tuple("Context::Revenue").field(e).finish(),
                        Context::Expenses(e) => {
                            f.debug_tuple("Context::Expenses").field(e).finish()
                        }
                        Context::Formula(e) => f.debug_tuple("Context::Formula").field(e).finish(),
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod wurbo_in {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            pub type ListenDetails = super::super::super::demo::form::context_types::ListenDetails;
            #[allow(unused_unsafe, clippy::all)]
            /// Add an event listener to the given element
            pub fn addeventlistener(details: &ListenDetails) {
                unsafe {
                    let super::super::super::demo::form::context_types::ListenDetails {
                        selector: selector0,
                        ty: ty0,
                    } = details;
                    let vec1 = selector0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = ty0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "demo:form/wurbo-in@0.1.0")]
                    extern "C" {
                        #[link_name = "addeventlistener"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr1.cast_mut(), len1, ptr2.cast_mut(), len2);
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod demo {
        #[allow(dead_code)]
        pub mod form {
            #[allow(dead_code, clippy::all)]
            pub mod wurbo_out {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Context = super::super::super::super::demo::form::context_types::Context;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_customize_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base6 = arg0;
                    let len6 = arg1;
                    let mut result6 = _rt::Vec::with_capacity(len6);
                    for i in 0..len6 {
                        let base = base6.add(i * 16);
                        let e6 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<*mut u8>();
                            let l4 = *base.add(12).cast::<usize>();
                            let len5 = l4;
                            let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                            (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                        };
                        result6.push(e6);
                    }
                    _rt::cabi_dealloc(base6, len6 * 16, 4);
                    let result7 = T::customize(result6);
                    let ptr8 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result7 {
                        Ok(_) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr8.add(8).cast::<usize>() = len9;
                            *ptr8.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_customize<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_render_cabi<T: Guest>(
                    arg0: i32,
                    arg1: ::core::mem::MaybeUninit<u64>,
                    arg2: i64,
                    arg3: i32,
                    arg4: f64,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    use super::super::super::super::demo::form::context_types::Context as V2;
                    let v2 = match arg0 {
                        0 => {
                            let e2 =
                                super::super::super::super::demo::form::context_types::Content {
                                    revenue: match arg1.assume_init() as i64 as i32 {
                                        0 => None,
                                        1 => {
                                            let e = f64::from_bits(arg2 as u64);
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    expenses: match arg3 {
                                        0 => None,
                                        1 => {
                                            let e = arg4;
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    formula: match arg5 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let len0 = arg7;
                                                let bytes0 = _rt::Vec::from_raw_parts(
                                                    arg6.cast(),
                                                    len0,
                                                    len0,
                                                );

                                                _rt::string_lift(bytes0)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                };
                            V2::AllContent(e2)
                        }
                        1 => {
                            let e2 = f64::from_bits(arg1.assume_init() as i64 as u64);
                            V2::Revenue(e2)
                        }
                        2 => {
                            let e2 = f64::from_bits(arg1.assume_init() as i64 as u64);
                            V2::Expenses(e2)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e2 = {
                                let len1 = arg2 as usize;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg1.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );

                                _rt::string_lift(bytes1)
                            };
                            V2::Formula(e2)
                        }
                    };
                    let result3 = T::render(v2);
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr4.add(8).cast::<usize>() = len5;
                            *ptr4.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr4.add(8).cast::<usize>() = len6;
                            *ptr4.add(4).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_render<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_activate_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::activate(match arg0 {
                        0 => None,
                        1 => {
                            let e = {
                                let base3 = arg1;
                                let len3 = arg2;
                                let mut result3 = _rt::Vec::with_capacity(len3);
                                for i in 0..len3 {
                                    let base = base3.add(i * 8);
                                    let e3 = {
                                        let l0 = *base.add(0).cast::<*mut u8>();
                                        let l1 = *base.add(4).cast::<usize>();
                                        let len2 = l1;
                                        let bytes2 =
                                            _rt::Vec::from_raw_parts(l0.cast(), len2, len2);

                                        _rt::string_lift(bytes2)
                                    };
                                    result3.push(e3);
                                }
                                _rt::cabi_dealloc(base3, len3 * 8, 4);

                                result3
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    });
                }
                pub trait Guest {
                    /// Optionally customize the configuration of the templates used to render the component
                    fn customize(
                        templates: _rt::Vec<(_rt::String, _rt::String)>,
                    ) -> Result<(), _rt::String>;
                    /// renders the initial Web component with the given data
                    /// and the target template to use as top level entry point
                    fn render(ctx: Context) -> Result<_rt::String, _rt::String>;
                    /// activate listening
                    fn activate(selectors: Option<_rt::Vec<_rt::String>>);
                }
                #[doc(hidden)]

                macro_rules! __export_demo_form_wurbo_out_0_1_0_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "demo:form/wurbo-out@0.1.0#customize"]
      unsafe extern "C" fn export_customize(arg0: *mut u8,arg1: usize,) -> *mut u8 {
        $($path_to_types)*::_export_customize_cabi::<$ty>(arg0, arg1)
      }
      #[export_name = "cabi_post_demo:form/wurbo-out@0.1.0#customize"]
      unsafe extern "C" fn _post_return_customize(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_customize::<$ty>(arg0)
      }
      #[export_name = "demo:form/wurbo-out@0.1.0#render"]
      unsafe extern "C" fn export_render(arg0: i32,arg1: ::core::mem::MaybeUninit::<u64>,arg2: i64,arg3: i32,arg4: f64,arg5: i32,arg6: *mut u8,arg7: usize,) -> *mut u8 {
        $($path_to_types)*::_export_render_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
      }
      #[export_name = "cabi_post_demo:form/wurbo-out@0.1.0#render"]
      unsafe extern "C" fn _post_return_render(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_render::<$ty>(arg0)
      }
      #[export_name = "demo:form/wurbo-out@0.1.0#activate"]
      unsafe extern "C" fn export_activate(arg0: i32,arg1: *mut u8,arg2: usize,) {
        $($path_to_types)*::_export_activate_cabi::<$ty>(arg0, arg1, arg2)
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_demo_form_wurbo_out_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_main_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::demo::form::wurbo_out::__export_demo_form_wurbo_out_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::demo::form::wurbo_out);
  )
}
#[doc(inline)]
pub(crate) use __export_main_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:main:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 622] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf3\x03\x01A\x02\x01\
A\x08\x01B\x08\x01r\x02\x08selectors\x02tys\x04\0\x0elisten-details\x03\0\0\x01k\
u\x01ks\x01r\x03\x07revenue\x02\x08expenses\x02\x07formula\x03\x04\0\x07content\x03\
\0\x04\x01q\x04\x0ball-content\x01\x05\0\x07revenue\x01u\0\x08expenses\x01u\0\x07\
formula\x01s\0\x04\0\x07context\x03\0\x06\x03\x01\x1ddemo:form/context-types@0.1\
.0\x05\0\x02\x03\0\0\x0elisten-details\x01B\x04\x02\x03\x02\x01\x01\x04\0\x0elis\
ten-details\x03\0\0\x01@\x01\x07details\x01\x01\0\x04\0\x10addeventlistener\x01\x02\
\x03\x01\x18demo:form/wurbo-in@0.1.0\x05\x02\x02\x03\0\0\x07context\x01B\x0e\x02\
\x03\x02\x01\x03\x04\0\x07context\x03\0\0\x01o\x02ss\x01p\x02\x01j\0\x01s\x01@\x01\
\x09templates\x03\0\x04\x04\0\x09customize\x01\x05\x01j\x01s\x01s\x01@\x01\x03ct\
x\x01\0\x06\x04\0\x06render\x01\x07\x01ps\x01k\x08\x01@\x01\x09selectors\x09\x01\
\0\x04\0\x08activate\x01\x0a\x04\x01\x19demo:form/wurbo-out@0.1.0\x05\x04\x04\x01\
\x14demo:form/main@0.1.0\x04\0\x0b\x0a\x01\0\x04main\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
